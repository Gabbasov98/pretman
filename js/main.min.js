function cartCalc() {
    $('.cartcalc .ccalc-minus').click(function(e) {
        let a = $(this).closest('.cartcalc').find('input').val();
        if (a > 1) {
            let b = +a - 1;
            $(this).closest('.cartcalc').find('input').val(b);
            $(this).closest('.cartcalc').find('input').trigger('change');
        } else {
            $(this).closest('.cartcalc').find('input').val(a);
        }
        e.stopImmediatePropagation()
    });

    $('.cartcalc .ccalc-plus').click(function(e) {
        let a = $(this).closest('.cartcalc').find('input').val();
        let b = +a + 1;
        $(this).closest('.cartcalc').find('input').val(b);
        $(this).closest('.cartcalc').find('input').trigger('change');
        e.stopImmediatePropagation()
    });

}

cartCalc()

$("._tab").click(function() {
    let parentBlock = $(this).parents("._tabs-parent")
    let tabId = $(this).attr("data-tab")
    console.log(parentBlock)
    $(parentBlock).find("._tab").removeClass("_active")
    $(this).addClass("_active")
    $(parentBlock).find(".tab-content").removeClass("_active")
    $(parentBlock).find(`.${tabId}`).addClass("_active")

    setActiveTab($(parentBlock))
    closeDropdown($(parentBlock).find(".tabs"))
})

$("._tabs-parent").each(function (i,el) {
    setActiveTab($(el))
})

function setActiveTab(el) {
    let activeTab = $(el).find("._tab._active").html()
    $(el).find(".tabs__current").html(activeTab)
}

$(".tabs__select").click(function () {
    $(this).parents(".tabs").toggleClass("_show-dropdown")
})

function closeDropdown(tabs) {
    $(tabs).removeClass("_show-dropdown")
}

$(document).mouseup( function(e){
    var div = $( ".tabs" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_show-dropdown")){
            closeDropdown($(div))
        }
    }
});

$(".qa-card__show").click(function () {
    $(this).parents(".qa-card").toggleClass("_active")
    $(this).siblings(".qa-card__hidden").slideToggle()
})

$(window).scroll(function() {
    if ($(window).scrollTop() > 100) {
        $(".scroll-up").addClass("scroll-up--active")
    } else {
        $(".scroll-up").removeClass("scroll-up--active")
    }
})

$(".scroll-up").click(function() {
    $(window).scrollTop(0);
})

$(".menu-item").hover(onIn, () => {});

function onIn() {
    if (window.innerWidth > 992) {
        let el = $(this)
        setTimeout(function() {
            if (el.is(':hover')) {
                let tab = $(el).attr("data-tab")
                $(".menu-item").removeClass("_active")
                $(el).addClass("_active")

                $(".submenu").hide()
                $(`.submenu[data-tab="${tab}"]`).show()
                // el.addClass("_show")
            }
        }, 10);
    }
}

$(".catalog-btn").click(function () {
    $(".header").toggleClass("_show-menu")
    if(window.innerWidth<=992){
        $(".menu").slideToggle()
    }
})

$(".cart-btn").click(function () {
    $(".header").toggleClass("_show-cart")
})

$(document).mouseup( function(e){ // событие клика по веб-документу
    var div = $( ".header" ); // тут указываем ID элемента
    if ( !div.is(e.target) // если клик был не по нашему блоку
        && div.has(e.target).length === 0 ) { // и не по его дочерним элементам
        if ($(div).hasClass("_show-menu")){
            $(div).removeClass("_show-menu")
        }
        if ($(div).hasClass("_show-cart")){
            $(div).removeClass("_show-cart")
        }
    }
});


$(window).on('load resize', function(){
    $(".submenu").each(function (index,el) {
        let id = $(el).attr("data-tab")
        if ($(window).width() <= 992) {
            $(`.submenu[data-tab="${id}"]`).insertAfter(`.menu-item[data-tab="${id}"]`)
        } else{
            $(el).insertAfter('menu__links');
        }
    })
});

$(".menu-item").click(function () {
    if ($(window).width() <= 992) {
        let id = $(this).attr("data-tab")
        $(this).toggleClass("_active")
        $(`.submenu[data-tab="${id}"]`).slideToggle()
    }
})

$(".burger").click(function () {
    $(".header").addClass("_open-mob-menu")
    $("body").addClass("fixed-body")
})

$(".menu-top__close").click(function () {
    $(".header").removeClass("_open-mob-menu")
    $("body").removeClass("fixed-body")
})

function Sliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)

        SlidersArray[index] = new Swiper(`.slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,
            navigation: {
                nextEl: `.slider[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.slider[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
        })
    })
}

function bannersSlider() {
    var swiper = new Swiper('.banners-slider .swiper-container', {
        slidesPerView: 1,
        spaceBetween: 0,
        watchSlidesProgress: true,
        preventClicks :true,
        a11y: false,
        observer: true,
        observeParents: true,
        observeSlideChildren: true,
        loop: true,
        autoplay: {
            delay: 3000,
        },
        pagination: {
            el: '.banners-slider .swiper-pagination',
            type: 'bullets',
            clickable: true,
        },
    })
}

function brandsSlider() {
    var swiper = new Swiper('.brands-slider2 .swiper-container', {
        slidesPerView: 6,
        spaceBetween: 0,
        watchSlidesProgress: true,
        preventClicks :true,
        a11y: false,
        observer: true,
        observeParents: true,
        observeSlideChildren: true,
        grid: {
            fill: 'row',
            rows: 2,
        },
        navigation: {
            nextEl: '.brands-slider2 .swiper-button-next',
            prevEl: '.brands-slider2 .swiper-button-prev',
        },
        pagination: {
            el: '.brands-slider2 .swiper-pagination',
            type: 'bullets',
            clickable: true,
        },
        breakpoints: {
            100: {
                slidesPerView: 3,
                spaceBetween: 0,
                grid: {
                    fill: 'row',
                    rows: 1,
                },
            },
            576: {
                slidesPerView: 6,
                spaceBetween: 0,
            },
            992: {
                slidesPerView: 6,
                spaceBetween: 0,
                grid: {
                    fill: 'row',
                    rows: 2,
                },
            }
        }
    })
}

function gallery() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".gallery")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let gallery = {
            mySwiper: {},
            mySwiper2: {}
        }

        gallery.mySwiper = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper`, {
            spaceBetween: 0,
            slidesPerView: "auto",
            freeMode: true,
            watchSlidesProgress: true,
            direction: "vertical",
            loop: true,
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                576: {
                    direction: "vertical",
                }
            }
        });
        gallery.mySwiper2 = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper2`, {
            spaceBetween: 0,
            direction: "vertical",
            loop: true,
            navigation: {
                nextEl: `.gallery[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.gallery[data-slider-id="${index}"] .swiper-button-prev`,
            },
            thumbs: {
                swiper:  gallery.mySwiper,
            },
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                576: {
                    direction: "vertical",
                }
            }
        });

        SlidersArray[index] = gallery
    })

}


Sliders()
brandsSlider()
gallery()
bannersSlider()

$("._file-upload input").change(function (e) {
    const [file] = e.target.files
    let fileName = file.name
    let fileContainer = $(this).parents(".file-field").find(".file-field__list")
    if(!$(this).prop("multiple")){
        $(fileContainer).find(".file").remove()
    }
    $(fileContainer).prepend(
        `
        <div class="uploaded-file">
            <span>${fileName}</span>
            <button type="button" class="uploaded-file__delete">
                <svg width="17" height="17" viewBox="0 0 17 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12.5 4.5L4.5 12.5" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M4.5 4.5L12.5 12.5" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
        </div>
        `
    )

    $(".uploaded-file__delete").click(function () {
        let parent = $(this).parents(".files")
        // clearFileInput(parent)
        $(this).parents(".uploaded-file").remove()
    })
})

$(".uploaded-file__delete").click(function () {
    let parent = $(this).parents(".file-field__list")
    clearFileInput(parent)
})

function clearFileInput(parent) {
    $(parent).find(".file-input input").val('')
    $(parent).find(".uploaded-file").remove()
}

setCartItemColor()
calcCartItemsTotalPrice()

function setCartItemColor() {
    $(".cart-color").each(function (i,el) {
        let checkedColor = $(el).find(".color-item input:checked").attr("data-name")
        $(el).find("._color-name").html(checkedColor)
    })
}

$(".color-item input").change(function () {
    setCartItemColor()
})

function calcCartItemsTotalPrice() {
    $(".cart-item").each(function (i,el) {
        let count = +$(el).find(".cartcalc input").val()
        let price = +$(el).find("._price").attr("data-price")
        let priceWithoutSale = +$(el).find("._price-without-sale").attr("data-price")

        $(el).find("._price").html(price.toLocaleString())
        $(el).find("._price-total").html((price * count).toLocaleString())
        $(el).find("._price-without-sale").html(priceWithoutSale.toLocaleString())
        $(el).find("._price-without-sale-total").html((priceWithoutSale * count).toLocaleString())
    })
}

$(".cart-item .cartcalc input").change(function () {
    calcCartItemsTotalPrice()
})


$(".favourite-btn,.compare-btn").click(function () {
    $(this).toggleClass("_added")
})

$(".cart-search .search-field__btn").click(function (e) {
    e.preventDefault()

    $(".cart-search").addClass("_active")
})

$(document).mouseup( function(e){
    let div = $( ".cart-search" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_active")){
            $(div).removeClass("_active")
        }
    }
});

$("input[name='buyerType']").change(function () {
    let parent = $(this).parents("._buyer-form")

    $(parent).find(".buyer__variant").removeClass("_active")
    $(parent).find(`.${$(this).val()}`).addClass("_active")
})

$(".compare-props").each(function (i,props) {

    $(props).find(".compare-prop").each(function (i,prop) {
        $(prop).attr("data-id",i)
    })
})


$(".compare-prop").mouseout(function () {
    let id = $(this).attr("data-id")
    $(`.compare-prop[data-id='${id}']`).removeClass("_active")
})


$(".compare-prop").mouseover(function () {
    let id = $(this).attr("data-id")
    $(`.compare-prop[data-id='${id}']`).addClass("_active")
})

let maps = document.querySelectorAll("[data-cord1]")

ymaps.ready(init);




function init(map){
    maps.forEach(map=> {
        createMap(map)
    })

    function createMap(map){
        let cord = [+map.dataset.cord1, +map.dataset.cord2]

        let myMap = new ymaps.Map(map, {
            center: cord,
            zoom: +map.dataset.zoom,
            controls: []
        });

        myMap.geoObjects.add(new ymaps.Placemark([+map.dataset.cord1, +map.dataset.cord2], {},
        {
            preset: 'islands#circleDotIcon',
            iconColor: '#FE3D3D'
        }))

        myMap.behaviors.disable('scrollZoom');
    }
}

$(".rating-block").each(function (i,el) {
    let value = +$(el).attr("data-rating") / 5 * 100

    $(el).find(".rating__fill").css("width", `${value}%`)
    $(el).find(".rating-block__num").html($(el).attr("data-rating"))

    let stars = $(el).find(".rating")

    $(stars).mousemove(function (e) {
        let percent = e.offsetX / $(this).outerWidth() * 100;
        $(el).find(".rating__fill").css("width", `${percent}%`)
    })

    $(stars).mouseleave(function (e) {
        let value = +$(el).attr("data-rating") / 5 * 100
        $(el).find(".rating__fill").css("width", `${value}%`)
        $(el).find(".rating-block__num").html($(el).attr("data-rating"))
    })

    $(stars).click(function (e) {
        let percent = e.offsetX / $(this).outerWidth() * 100;
        $(el).attr("data-rating",(percent * 5 / 100).toFixed(1))
        $(el).find(".rating-block__num").html($(el).attr("data-rating"))
    })
})

$(".comment-stat ._like").click(function () {
    let count = $(this).find("._count")
    let unlike = $(this).siblings("._unlike")
    let unlikeCount = $(unlike).find("._count")
    if($(this).hasClass("_active")){
        $(this).removeClass("_active")
        $(count).html(+$(count).html() - 1)
        return
    } else{
        $(this).addClass("_active")
        $(count).html(+$(count).html() + 1)
    }

    if($(unlike).hasClass("_active")){
        $(unlike).removeClass("_active")
        $(unlikeCount).html(+$(unlikeCount).html() - 1)
    }
})

$(".comment-stat ._unlike").click(function () {
    let count = $(this).find("._count")
    let like = $(this).siblings("._like")
    let likeCount = $(like).find("._count")
    if($(this).hasClass("_active")){
        $(this).removeClass("_active")
        $(count).html(+$(count).html() - 1)
        return
    } else{
        $(this).addClass("_active")
        $(count).html(+$(count).html() + 1)
    }

    if($(like).hasClass("_active")){
        $(like).removeClass("_active")
        $(likeCount).html(+$(likeCount).html() - 1)
    }
})

$(".filter-group__toggle").click(function () {
    let parent = $(this).parents(".filter-group")

    $(parent).toggleClass("_active")
    $(parent).find(".filter-group__bottom").slideToggle()
})

let filterSliders = document.querySelectorAll(".filter-slider")

filterSliders.forEach(slider => {
    const rangeSlider = slider.querySelector(`.range-slider`)
    const rangeOutput1 = slider.querySelector(`.filter-slider__output1`)
    const rangeOutput2 = slider.querySelector(`.filter-slider__output2`)
    const rangeOutputs = [rangeOutput1, rangeOutput2]

    let startValue1 = +slider.getAttribute("data-start")
    let startValue2 = +slider.getAttribute("data-start2")
    let min = +slider.getAttribute("data-min")
    let max = +slider.getAttribute("data-max")

    if (rangeSlider) {
        noUiSlider.create(rangeSlider, {
            start: [startValue1, startValue2],
            connect: true,
            step: 1,
            range: {
                'min': min,
                'max': max
            }
        });
    }
    if (rangeSlider) {
        rangeSlider.noUiSlider.on('update', function(values, handle) {
            rangeOutputs[handle].innerHTML = Math.round(values[handle])
        })
    }
})


$(".more-checkbox").click(function () {
    $(this).parents(".filter-group__checks").addClass("_show-all")
})

$(".filter-btn").click(function () {
    $(".filter").toggleClass("_active")
    $("body").toggleClass("fixed-body")
})

$("._close-filter").click(function () {
    $(".filter").toggleClass("_active")
    $("body").toggleClass("fixed-body")
})

$("[data-copy]").click(function () {
    let copyText = $(this).attr("data-copy")

    let $tmp = $("<textarea>");
    $("body").append($tmp);
    $tmp.val(copyText).select();
    document.execCommand("copy");
    $tmp.remove();
})

$(".share-block__toggle").click(function (e) {

    $(".share-block").addClass("_active")
})

$(document).mouseup( function(e){
    let div = $( ".share-block" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_active")){
            $(div).removeClass("_active")
        }
    }
});

$(".catalog-delivery__link").click(function () {
    $(this).parents(".catalog-delivery__item").toggleClass("_active")
    $(this).siblings(".catalog-delivery__hidden").slideToggle()
})

let body = document.querySelector(".m-page")
let modalTogglers = document.querySelectorAll("[data-modal]")
let modals = document.querySelectorAll(".modal")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        openModal(modalId)
    }
})

function closeModals() {
    modals.forEach(modal => {
        modal.classList.remove("_active")
        body.classList.remove("fixed-body2")
    })
}

function openModal(modalId) {
    closeModals()
    let modal = document.querySelector(`#${modalId}`)
    let closeButtons = modal.querySelectorAll(`._close-modal`)

    modal.classList.add("_active")
    body.classList.add("fixed-body2")


    closeButtons.forEach(btn => {
        btn.onclick = ()=> {
            modal.classList.remove("_active")
            body.classList.remove("fixed-body2")
        }
    })
}

var getScrollBarSize = (function() {
    var el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (var key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        var size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }

        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();


$("._step-btn").click(function () {
    let stepId = $(this).attr("data-step")
    let stepsCount = $(".config-step").length

    $(".config-step").removeClass("_active")
    $(`.config-step[data-step="${stepId}"]`).addClass("_active")

    let activeStepId = $(".config-step._active").attr("data-step")

    $(".config ._current").html(activeStepId)
    $(".config ._total").html(stepsCount)
})


$(".config__toggle").click(function () {
    $(".config-modal").addClass("_active")
    $("body").addClass("fixed-body")
})

$("._close-config").click(function () {
    $(".config-modal").removeClass("_active")
    $("body").removeClass("fixed-body")
})

$(document).ready(function() {
    $('input[type="tel"]').mask('+7 999 999-9999', { autoclear: false }, { placeholder: '+7             ' });


    $(".m-select select").niceSelect()

    getScrollBarSize()

    fix100vh()
    $(window).resize(function () {
        fix100vh()
        getScrollBarSize()
    })

});

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
